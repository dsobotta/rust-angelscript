/* automatically generated by rust-bindgen */


////////////////////////
/// AS_TYPES
////////////////////////
pub const ANGELSCRIPT_VERSION: u32 = 23102;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asIScriptEngine {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asIScriptModule {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asIScriptContext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asIScriptGeneric {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asIScriptObject {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asITypeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asIScriptFunction {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asIBinaryStream {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asIJITCompiler {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asIThreadManager {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asILockableSharedBool {
    _unused: [u8; 0],
}
pub const asERetCodes_asSUCCESS: asERetCodes = 0;
pub const asERetCodes_asERROR: asERetCodes = -1;
pub const asERetCodes_asCONTEXT_ACTIVE: asERetCodes = -2;
pub const asERetCodes_asCONTEXT_NOT_FINISHED: asERetCodes = -3;
pub const asERetCodes_asCONTEXT_NOT_PREPARED: asERetCodes = -4;
pub const asERetCodes_asINVALID_ARG: asERetCodes = -5;
pub const asERetCodes_asNO_FUNCTION: asERetCodes = -6;
pub const asERetCodes_asNOT_SUPPORTED: asERetCodes = -7;
pub const asERetCodes_asINVALID_NAME: asERetCodes = -8;
pub const asERetCodes_asNAME_TAKEN: asERetCodes = -9;
pub const asERetCodes_asINVALID_DECLARATION: asERetCodes = -10;
pub const asERetCodes_asINVALID_OBJECT: asERetCodes = -11;
pub const asERetCodes_asINVALID_TYPE: asERetCodes = -12;
pub const asERetCodes_asALREADY_REGISTERED: asERetCodes = -13;
pub const asERetCodes_asMULTIPLE_FUNCTIONS: asERetCodes = -14;
pub const asERetCodes_asNO_MODULE: asERetCodes = -15;
pub const asERetCodes_asNO_GLOBAL_VAR: asERetCodes = -16;
pub const asERetCodes_asINVALID_CONFIGURATION: asERetCodes = -17;
pub const asERetCodes_asINVALID_INTERFACE: asERetCodes = -18;
pub const asERetCodes_asCANT_BIND_ALL_FUNCTIONS: asERetCodes = -19;
pub const asERetCodes_asLOWER_ARRAY_DIMENSION_NOT_REGISTERED: asERetCodes = -20;
pub const asERetCodes_asWRONG_CONFIG_GROUP: asERetCodes = -21;
pub const asERetCodes_asCONFIG_GROUP_IS_IN_USE: asERetCodes = -22;
pub const asERetCodes_asILLEGAL_BEHAVIOUR_FOR_TYPE: asERetCodes = -23;
pub const asERetCodes_asWRONG_CALLING_CONV: asERetCodes = -24;
pub const asERetCodes_asBUILD_IN_PROGRESS: asERetCodes = -25;
pub const asERetCodes_asINIT_GLOBAL_VARS_FAILED: asERetCodes = -26;
pub const asERetCodes_asOUT_OF_MEMORY: asERetCodes = -27;
pub const asERetCodes_asMODULE_IS_IN_USE: asERetCodes = -28;
pub type asERetCodes = i32;
pub const asEEngineProp_asEP_ALLOW_UNSAFE_REFERENCES: asEEngineProp = 1;
pub const asEEngineProp_asEP_OPTIMIZE_BYTECODE: asEEngineProp = 2;
pub const asEEngineProp_asEP_COPY_SCRIPT_SECTIONS: asEEngineProp = 3;
pub const asEEngineProp_asEP_MAX_STACK_SIZE: asEEngineProp = 4;
pub const asEEngineProp_asEP_USE_CHARACTER_LITERALS: asEEngineProp = 5;
pub const asEEngineProp_asEP_ALLOW_MULTILINE_STRINGS: asEEngineProp = 6;
pub const asEEngineProp_asEP_ALLOW_IMPLICIT_HANDLE_TYPES: asEEngineProp = 7;
pub const asEEngineProp_asEP_BUILD_WITHOUT_LINE_CUES: asEEngineProp = 8;
pub const asEEngineProp_asEP_INIT_GLOBAL_VARS_AFTER_BUILD: asEEngineProp = 9;
pub const asEEngineProp_asEP_REQUIRE_ENUM_SCOPE: asEEngineProp = 10;
pub const asEEngineProp_asEP_SCRIPT_SCANNER: asEEngineProp = 11;
pub const asEEngineProp_asEP_INCLUDE_JIT_INSTRUCTIONS: asEEngineProp = 12;
pub const asEEngineProp_asEP_STRING_ENCODING: asEEngineProp = 13;
pub const asEEngineProp_asEP_PROPERTY_ACCESSOR_MODE: asEEngineProp = 14;
pub const asEEngineProp_asEP_EXPAND_DEF_ARRAY_TO_TMPL: asEEngineProp = 15;
pub const asEEngineProp_asEP_AUTO_GARBAGE_COLLECT: asEEngineProp = 16;
pub const asEEngineProp_asEP_DISALLOW_GLOBAL_VARS: asEEngineProp = 17;
pub const asEEngineProp_asEP_ALWAYS_IMPL_DEFAULT_CONSTRUCT: asEEngineProp = 18;
pub const asEEngineProp_asEP_COMPILER_WARNINGS: asEEngineProp = 19;
pub const asEEngineProp_asEP_DISALLOW_VALUE_ASSIGN_FOR_REF_TYPE: asEEngineProp = 20;
pub const asEEngineProp_asEP_ALTER_SYNTAX_NAMED_ARGS: asEEngineProp = 21;
pub const asEEngineProp_asEP_DISABLE_INTEGER_DIVISION: asEEngineProp = 22;
pub const asEEngineProp_asEP_DISALLOW_EMPTY_LIST_ELEMENTS: asEEngineProp = 23;
pub const asEEngineProp_asEP_PRIVATE_PROP_AS_PROTECTED: asEEngineProp = 24;
pub const asEEngineProp_asEP_ALLOW_UNICODE_IDENTIFIERS: asEEngineProp = 25;
pub const asEEngineProp_asEP_HEREDOC_TRIM_MODE: asEEngineProp = 26;
pub const asEEngineProp_asEP_LAST_PROPERTY: asEEngineProp = 27;
pub type asEEngineProp = u32;
pub const asECallConvTypes_asCALL_CDECL: asECallConvTypes = 0;
pub const asECallConvTypes_asCALL_STDCALL: asECallConvTypes = 1;
pub const asECallConvTypes_asCALL_THISCALL_ASGLOBAL: asECallConvTypes = 2;
pub const asECallConvTypes_asCALL_THISCALL: asECallConvTypes = 3;
pub const asECallConvTypes_asCALL_CDECL_OBJLAST: asECallConvTypes = 4;
pub const asECallConvTypes_asCALL_CDECL_OBJFIRST: asECallConvTypes = 5;
pub const asECallConvTypes_asCALL_GENERIC: asECallConvTypes = 6;
pub const asECallConvTypes_asCALL_THISCALL_OBJLAST: asECallConvTypes = 7;
pub const asECallConvTypes_asCALL_THISCALL_OBJFIRST: asECallConvTypes = 8;
pub type asECallConvTypes = u32;
pub const asEObjTypeFlags_asOBJ_REF: asEObjTypeFlags = 1;
pub const asEObjTypeFlags_asOBJ_VALUE: asEObjTypeFlags = 2;
pub const asEObjTypeFlags_asOBJ_GC: asEObjTypeFlags = 4;
pub const asEObjTypeFlags_asOBJ_POD: asEObjTypeFlags = 8;
pub const asEObjTypeFlags_asOBJ_NOHANDLE: asEObjTypeFlags = 16;
pub const asEObjTypeFlags_asOBJ_SCOPED: asEObjTypeFlags = 32;
pub const asEObjTypeFlags_asOBJ_TEMPLATE: asEObjTypeFlags = 64;
pub const asEObjTypeFlags_asOBJ_ASHANDLE: asEObjTypeFlags = 128;
pub const asEObjTypeFlags_asOBJ_APP_CLASS: asEObjTypeFlags = 256;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_CONSTRUCTOR: asEObjTypeFlags = 512;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_DESTRUCTOR: asEObjTypeFlags = 1024;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_ASSIGNMENT: asEObjTypeFlags = 2048;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_COPY_CONSTRUCTOR: asEObjTypeFlags = 4096;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_C: asEObjTypeFlags = 768;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_CD: asEObjTypeFlags = 1792;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_CA: asEObjTypeFlags = 2816;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_CK: asEObjTypeFlags = 4864;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_CDA: asEObjTypeFlags = 3840;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_CDK: asEObjTypeFlags = 5888;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_CAK: asEObjTypeFlags = 6912;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_CDAK: asEObjTypeFlags = 7936;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_D: asEObjTypeFlags = 1280;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_DA: asEObjTypeFlags = 3328;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_DK: asEObjTypeFlags = 5376;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_DAK: asEObjTypeFlags = 7424;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_A: asEObjTypeFlags = 2304;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_AK: asEObjTypeFlags = 6400;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_K: asEObjTypeFlags = 4352;
pub const asEObjTypeFlags_asOBJ_APP_PRIMITIVE: asEObjTypeFlags = 8192;
pub const asEObjTypeFlags_asOBJ_APP_FLOAT: asEObjTypeFlags = 16384;
pub const asEObjTypeFlags_asOBJ_APP_ARRAY: asEObjTypeFlags = 32768;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_ALLINTS: asEObjTypeFlags = 65536;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_ALLFLOATS: asEObjTypeFlags = 131072;
pub const asEObjTypeFlags_asOBJ_NOCOUNT: asEObjTypeFlags = 262144;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_ALIGN8: asEObjTypeFlags = 524288;
pub const asEObjTypeFlags_asOBJ_IMPLICIT_HANDLE: asEObjTypeFlags = 1048576;
pub const asEObjTypeFlags_asOBJ_MASK_VALID_FLAGS: asEObjTypeFlags = 2097151;
pub const asEObjTypeFlags_asOBJ_SCRIPT_OBJECT: asEObjTypeFlags = 2097152;
pub const asEObjTypeFlags_asOBJ_SHARED: asEObjTypeFlags = 4194304;
pub const asEObjTypeFlags_asOBJ_NOINHERIT: asEObjTypeFlags = 8388608;
pub const asEObjTypeFlags_asOBJ_FUNCDEF: asEObjTypeFlags = 16777216;
pub const asEObjTypeFlags_asOBJ_LIST_PATTERN: asEObjTypeFlags = 33554432;
pub const asEObjTypeFlags_asOBJ_ENUM: asEObjTypeFlags = 67108864;
pub const asEObjTypeFlags_asOBJ_TEMPLATE_SUBTYPE: asEObjTypeFlags = 134217728;
pub const asEObjTypeFlags_asOBJ_TYPEDEF: asEObjTypeFlags = 268435456;
pub const asEObjTypeFlags_asOBJ_ABSTRACT: asEObjTypeFlags = 536870912;
pub const asEObjTypeFlags_asOBJ_APP_ALIGN16: asEObjTypeFlags = 1073741824;
pub type asEObjTypeFlags = u32;
pub const asEBehaviours_asBEHAVE_CONSTRUCT: asEBehaviours = 0;
pub const asEBehaviours_asBEHAVE_LIST_CONSTRUCT: asEBehaviours = 1;
pub const asEBehaviours_asBEHAVE_DESTRUCT: asEBehaviours = 2;
pub const asEBehaviours_asBEHAVE_FACTORY: asEBehaviours = 3;
pub const asEBehaviours_asBEHAVE_LIST_FACTORY: asEBehaviours = 4;
pub const asEBehaviours_asBEHAVE_ADDREF: asEBehaviours = 5;
pub const asEBehaviours_asBEHAVE_RELEASE: asEBehaviours = 6;
pub const asEBehaviours_asBEHAVE_GET_WEAKREF_FLAG: asEBehaviours = 7;
pub const asEBehaviours_asBEHAVE_TEMPLATE_CALLBACK: asEBehaviours = 8;
pub const asEBehaviours_asBEHAVE_FIRST_GC: asEBehaviours = 9;
pub const asEBehaviours_asBEHAVE_GETREFCOUNT: asEBehaviours = 9;
pub const asEBehaviours_asBEHAVE_SETGCFLAG: asEBehaviours = 10;
pub const asEBehaviours_asBEHAVE_GETGCFLAG: asEBehaviours = 11;
pub const asEBehaviours_asBEHAVE_ENUMREFS: asEBehaviours = 12;
pub const asEBehaviours_asBEHAVE_RELEASEREFS: asEBehaviours = 13;
pub const asEBehaviours_asBEHAVE_LAST_GC: asEBehaviours = 13;
pub const asEBehaviours_asBEHAVE_MAX: asEBehaviours = 14;
pub type asEBehaviours = u32;
pub const asEContextState_asEXECUTION_FINISHED: asEContextState = 0;
pub const asEContextState_asEXECUTION_SUSPENDED: asEContextState = 1;
pub const asEContextState_asEXECUTION_ABORTED: asEContextState = 2;
pub const asEContextState_asEXECUTION_EXCEPTION: asEContextState = 3;
pub const asEContextState_asEXECUTION_PREPARED: asEContextState = 4;
pub const asEContextState_asEXECUTION_UNINITIALIZED: asEContextState = 5;
pub const asEContextState_asEXECUTION_ACTIVE: asEContextState = 6;
pub const asEContextState_asEXECUTION_ERROR: asEContextState = 7;
pub type asEContextState = u32;
pub const asEMsgType_asMSGTYPE_ERROR: asEMsgType = 0;
pub const asEMsgType_asMSGTYPE_WARNING: asEMsgType = 1;
pub const asEMsgType_asMSGTYPE_INFORMATION: asEMsgType = 2;
pub type asEMsgType = u32;
pub const asEGCFlags_asGC_FULL_CYCLE: asEGCFlags = 1;
pub const asEGCFlags_asGC_ONE_STEP: asEGCFlags = 2;
pub const asEGCFlags_asGC_DESTROY_GARBAGE: asEGCFlags = 4;
pub const asEGCFlags_asGC_DETECT_GARBAGE: asEGCFlags = 8;
pub type asEGCFlags = u32;
pub const asETokenClass_asTC_UNKNOWN: asETokenClass = 0;
pub const asETokenClass_asTC_KEYWORD: asETokenClass = 1;
pub const asETokenClass_asTC_VALUE: asETokenClass = 2;
pub const asETokenClass_asTC_IDENTIFIER: asETokenClass = 3;
pub const asETokenClass_asTC_COMMENT: asETokenClass = 4;
pub const asETokenClass_asTC_WHITESPACE: asETokenClass = 5;
pub type asETokenClass = u32;
pub const asETypeIdFlags_asTYPEID_VOID: asETypeIdFlags = 0;
pub const asETypeIdFlags_asTYPEID_BOOL: asETypeIdFlags = 1;
pub const asETypeIdFlags_asTYPEID_INT8: asETypeIdFlags = 2;
pub const asETypeIdFlags_asTYPEID_INT16: asETypeIdFlags = 3;
pub const asETypeIdFlags_asTYPEID_INT32: asETypeIdFlags = 4;
pub const asETypeIdFlags_asTYPEID_INT64: asETypeIdFlags = 5;
pub const asETypeIdFlags_asTYPEID_UINT8: asETypeIdFlags = 6;
pub const asETypeIdFlags_asTYPEID_UINT16: asETypeIdFlags = 7;
pub const asETypeIdFlags_asTYPEID_UINT32: asETypeIdFlags = 8;
pub const asETypeIdFlags_asTYPEID_UINT64: asETypeIdFlags = 9;
pub const asETypeIdFlags_asTYPEID_FLOAT: asETypeIdFlags = 10;
pub const asETypeIdFlags_asTYPEID_DOUBLE: asETypeIdFlags = 11;
pub const asETypeIdFlags_asTYPEID_OBJHANDLE: asETypeIdFlags = 1073741824;
pub const asETypeIdFlags_asTYPEID_HANDLETOCONST: asETypeIdFlags = 536870912;
pub const asETypeIdFlags_asTYPEID_MASK_OBJECT: asETypeIdFlags = 469762048;
pub const asETypeIdFlags_asTYPEID_APPOBJECT: asETypeIdFlags = 67108864;
pub const asETypeIdFlags_asTYPEID_SCRIPTOBJECT: asETypeIdFlags = 134217728;
pub const asETypeIdFlags_asTYPEID_TEMPLATE: asETypeIdFlags = 268435456;
pub const asETypeIdFlags_asTYPEID_MASK_SEQNBR: asETypeIdFlags = 67108863;
pub type asETypeIdFlags = u32;
pub const asETypeModifiers_asTM_NONE: asETypeModifiers = 0;
pub const asETypeModifiers_asTM_INREF: asETypeModifiers = 1;
pub const asETypeModifiers_asTM_OUTREF: asETypeModifiers = 2;
pub const asETypeModifiers_asTM_INOUTREF: asETypeModifiers = 3;
pub const asETypeModifiers_asTM_CONST: asETypeModifiers = 4;
pub type asETypeModifiers = u32;
pub const asEGMFlags_asGM_ONLY_IF_EXISTS: asEGMFlags = 0;
pub const asEGMFlags_asGM_CREATE_IF_NOT_EXISTS: asEGMFlags = 1;
pub const asEGMFlags_asGM_ALWAYS_CREATE: asEGMFlags = 2;
pub type asEGMFlags = u32;
pub const asECompileFlags_asCOMP_ADD_TO_MODULE: asECompileFlags = 1;
pub type asECompileFlags = u32;
pub const asEFuncType_asFUNC_DUMMY: asEFuncType = -1;
pub const asEFuncType_asFUNC_SYSTEM: asEFuncType = 0;
pub const asEFuncType_asFUNC_SCRIPT: asEFuncType = 1;
pub const asEFuncType_asFUNC_INTERFACE: asEFuncType = 2;
pub const asEFuncType_asFUNC_VIRTUAL: asEFuncType = 3;
pub const asEFuncType_asFUNC_FUNCDEF: asEFuncType = 4;
pub const asEFuncType_asFUNC_IMPORTED: asEFuncType = 5;
pub const asEFuncType_asFUNC_DELEGATE: asEFuncType = 6;
pub type asEFuncType = i32;
pub type asBYTE = ::std::os::raw::c_uchar;
pub type asWORD = ::std::os::raw::c_ushort;
pub type asUINT = ::std::os::raw::c_uint;
pub type asPWORD = usize;
pub type asDWORD = ::std::os::raw::c_uint;
pub type asQWORD = ::std::os::raw::c_ulong;
pub type asINT64 = ::std::os::raw::c_long;
pub const asBOOL_asTRUE: asBOOL = 1;
pub const asBOOL_asFALSE: asBOOL = 0;
pub type asBOOL = u32;
pub type asBINARYREADFUNC_t = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        size: asUINT,
        param: *mut ::std::os::raw::c_void,
    ),
>;
pub type asBINARYWRITEFUNC_t = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *const ::std::os::raw::c_void,
        size: asUINT,
        param: *mut ::std::os::raw::c_void,
    ),
>;
pub type asFUNCTION_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type asGENFUNC_t = ::std::option::Option<unsafe extern "C" fn(arg1: *mut asIScriptGeneric)>;
pub type asALLOCFUNC_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: usize) -> *mut ::std::os::raw::c_void>;
pub type asFREEFUNC_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type asCLEANENGINEFUNC_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut asIScriptEngine)>;
pub type asCLEANMODULEFUNC_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut asIScriptModule)>;
pub type asCLEANCONTEXTFUNC_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut asIScriptContext)>;
pub type asCLEANFUNCTIONFUNC_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut asIScriptFunction)>;
pub type asCLEANTYPEINFOFUNC_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut asITypeInfo)>;
pub type asCLEANSCRIPTOBJECTFUNC_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut asIScriptObject)>;
pub type asREQUESTCONTEXTFUNC_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut asIScriptEngine,
        arg2: *mut ::std::os::raw::c_void,
    ) -> *mut asIScriptContext,
>;
pub type asRETURNCONTEXTFUNC_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut asIScriptEngine,
        arg2: *mut asIScriptContext,
        arg3: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asSMessageInfo {
    pub section: *const ::std::os::raw::c_char,
    pub row: ::std::os::raw::c_int,
    pub col: ::std::os::raw::c_int,
    pub type_: asEMsgType,
    pub message: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_asSMessageInfo() {
    assert_eq!(
        ::std::mem::size_of::<asSMessageInfo>(),
        32usize,
        concat!("Size of: ", stringify!(asSMessageInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<asSMessageInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(asSMessageInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSMessageInfo>())).section as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asSMessageInfo),
            "::",
            stringify!(section)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSMessageInfo>())).row as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asSMessageInfo),
            "::",
            stringify!(row)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSMessageInfo>())).col as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(asSMessageInfo),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSMessageInfo>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(asSMessageInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSMessageInfo>())).message as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(asSMessageInfo),
            "::",
            stringify!(message)
        )
    );
}

////////////////////////
/// AS_CORE
////////////////////////
extern "C" {
    pub fn asCreateScriptEngine(version: asDWORD) -> *mut asIScriptEngine;
}
extern "C" {
    pub fn asGetLibraryVersion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asGetLibraryOptions() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asGetActiveContext() -> *mut asIScriptContext;
}
extern "C" {
    pub fn asPrepareMultithread(externalMgr: *mut asIThreadManager) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asUnprepareMultithread();
}
extern "C" {
    pub fn asGetThreadManager() -> *mut asIThreadManager;
}
extern "C" {
    pub fn asAcquireExclusiveLock();
}
extern "C" {
    pub fn asReleaseExclusiveLock();
}
extern "C" {
    pub fn asAcquireSharedLock();
}
extern "C" {
    pub fn asReleaseSharedLock();
}
extern "C" {
    pub fn asThreadCleanup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asSetGlobalMemoryFunctions(
        allocFunc: asALLOCFUNC_t,
        freeFunc: asFREEFUNC_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asResetGlobalMemoryFunctions() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asAllocMem(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asFreeMem(mem: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn asCreateLockableSharedBool() -> *mut asILockableSharedBool;
}


////////////////////////
/// AS_ENGINE
////////////////////////
extern "C" {
    #[doc = ""]
    pub fn asEngine_AddRef(e: *mut asIScriptEngine) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_Release(e: *mut asIScriptEngine) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_ShutDownAndRelease(e: *mut asIScriptEngine) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_SetEngineProperty(
        e: *mut asIScriptEngine,
        property: asEEngineProp,
        value: asPWORD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GetEngineProperty(e: *mut asIScriptEngine, property: asEEngineProp) -> asPWORD;
}
extern "C" {
    pub fn asEngine_SetMessageCallback(
        e: *mut asIScriptEngine,
        callback: asFUNCTION_t,
        obj: *mut ::std::os::raw::c_void,
        callConv: asDWORD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_ClearMessageCallback(e: *mut asIScriptEngine) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_WriteMessage(
        e: *mut asIScriptEngine,
        section: *const ::std::os::raw::c_char,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        type_: asEMsgType,
        message: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_SetJITCompiler(
        e: *mut asIScriptEngine,
        compiler: *mut asIJITCompiler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GetJITCompiler(e: *mut asIScriptEngine) -> *mut asIJITCompiler;
}
extern "C" {
    pub fn asEngine_RegisterGlobalFunction(
        e: *mut asIScriptEngine,
        declaration: *const ::std::os::raw::c_char,
        funcPointer: asFUNCTION_t,
        callConv: asDWORD,
        auxiliary: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GetGlobalFunctionCount(e: *mut asIScriptEngine) -> asUINT;
}
extern "C" {
    pub fn asEngine_GetGlobalFunctionByIndex(
        e: *mut asIScriptEngine,
        index: asUINT,
    ) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asEngine_GetGlobalFunctionByDecl(
        e: *mut asIScriptEngine,
        declaration: *const ::std::os::raw::c_char,
    ) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asEngine_RegisterGlobalProperty(
        e: *mut asIScriptEngine,
        declaration: *const ::std::os::raw::c_char,
        pointer: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GetGlobalPropertyCount(e: *mut asIScriptEngine) -> asUINT;
}
extern "C" {
    pub fn asEngine_GetGlobalPropertyByIndex(
        e: *mut asIScriptEngine,
        index: asUINT,
        name: *mut *const ::std::os::raw::c_char,
        nameSpace: *mut *const ::std::os::raw::c_char,
        typeId: *mut ::std::os::raw::c_int,
        isConst: *mut asBOOL,
        configGroup: *mut *const ::std::os::raw::c_char,
        pointer: *mut *mut ::std::os::raw::c_void,
        accessMask: *mut asDWORD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GetGlobalPropertyIndexByName(
        e: *mut asIScriptEngine,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GetGlobalPropertyIndexByDecl(
        e: *mut asIScriptEngine,
        decl: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_RegisterObjectType(
        e: *mut asIScriptEngine,
        name: *const ::std::os::raw::c_char,
        byteSize: ::std::os::raw::c_int,
        flags: asDWORD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_RegisterObjectProperty(
        e: *mut asIScriptEngine,
        obj: *const ::std::os::raw::c_char,
        declaration: *const ::std::os::raw::c_char,
        byteOffset: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_RegisterObjectMethod(
        e: *mut asIScriptEngine,
        obj: *const ::std::os::raw::c_char,
        declaration: *const ::std::os::raw::c_char,
        funcPointer: asFUNCTION_t,
        callConv: asDWORD,
        auxiliary: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_RegisterObjectBehaviour(
        e: *mut asIScriptEngine,
        datatype: *const ::std::os::raw::c_char,
        behaviour: asEBehaviours,
        declaration: *const ::std::os::raw::c_char,
        funcPointer: asFUNCTION_t,
        callConv: asDWORD,
        auxiliary: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_RegisterInterface(
        e: *mut asIScriptEngine,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_RegisterInterfaceMethod(
        e: *mut asIScriptEngine,
        intf: *const ::std::os::raw::c_char,
        declaration: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GetObjectTypeCount(e: *mut asIScriptEngine) -> asUINT;
}
extern "C" {
    pub fn asEngine_GetObjectTypeByIndex(
        e: *mut asIScriptEngine,
        index: asUINT,
    ) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asEngine_RegisterStringFactory(
        e: *mut asIScriptEngine,
        datatype: *const ::std::os::raw::c_char,
        factoryFunc: asFUNCTION_t,
        callConv: asDWORD,
        auxiliary: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GetStringFactoryReturnTypeId(
        e: *mut asIScriptEngine,
        flags: *mut asDWORD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_RegisterDefaultArrayType(
        e: *mut asIScriptEngine,
        type_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GetDefaultArrayTypeId(e: *mut asIScriptEngine) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_RegisterEnum(
        e: *mut asIScriptEngine,
        type_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_RegisterEnumValue(
        e: *mut asIScriptEngine,
        type_: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GetEnumCount(e: *mut asIScriptEngine) -> asUINT;
}
extern "C" {
    pub fn asEngine_GetEnumByIndex(e: *mut asIScriptEngine, index: asUINT) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asEngine_RegisterFuncdef(
        e: *mut asIScriptEngine,
        decl: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GetFuncdefCount(e: *mut asIScriptEngine) -> asUINT;
}
extern "C" {
    pub fn asEngine_GetFuncdefByIndex(e: *mut asIScriptEngine, index: asUINT) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asEngine_RegisterTypedef(
        e: *mut asIScriptEngine,
        type_: *const ::std::os::raw::c_char,
        decl: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GetTypedefCount(e: *mut asIScriptEngine) -> asUINT;
}
extern "C" {
    pub fn asEngine_GetTypedefByIndex(e: *mut asIScriptEngine, index: asUINT) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asEngine_BeginConfigGroup(
        e: *mut asIScriptEngine,
        groupName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_EndConfigGroup(e: *mut asIScriptEngine) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_RemoveConfigGroup(
        e: *mut asIScriptEngine,
        groupName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_SetDefaultAccessMask(e: *mut asIScriptEngine, defaultMask: asDWORD) -> asDWORD;
}
extern "C" {
    pub fn asEngine_SetDefaultNamespace(
        e: *mut asIScriptEngine,
        nameSpace: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GetDefaultNamespace(e: *mut asIScriptEngine) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asEngine_GetModule(
        e: *mut asIScriptEngine,
        module: *const ::std::os::raw::c_char,
        flag: asEGMFlags,
    ) -> *mut asIScriptModule;
}
extern "C" {
    pub fn asEngine_DiscardModule(
        e: *mut asIScriptEngine,
        module: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GetModuleCount(e: *mut asIScriptEngine) -> asUINT;
}
extern "C" {
    pub fn asEngine_GetModuleByIndex(
        e: *mut asIScriptEngine,
        index: asUINT,
    ) -> *mut asIScriptModule;
}
extern "C" {
    pub fn asEngine_GetFunctionById(
        e: *mut asIScriptEngine,
        funcId: ::std::os::raw::c_int,
    ) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asEngine_GetTypeIdByDecl(
        e: *mut asIScriptEngine,
        decl: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GetTypeDeclaration(
        e: *mut asIScriptEngine,
        typeId: ::std::os::raw::c_int,
        includeNamespace: asBOOL,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asEngine_GetSizeOfPrimitiveType(
        e: *mut asIScriptEngine,
        typeId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GetTypeInfoById(
        e: *mut asIScriptEngine,
        typeId: ::std::os::raw::c_int,
    ) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asEngine_GetTypeInfoByName(
        e: *mut asIScriptEngine,
        name: *const ::std::os::raw::c_char,
    ) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asEngine_GetTypeInfoByDecl(
        e: *mut asIScriptEngine,
        decl: *const ::std::os::raw::c_char,
    ) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asEngine_CreateContext(e: *mut asIScriptEngine) -> *mut asIScriptContext;
}
extern "C" {
    pub fn asEngine_CreateScriptObject(
        e: *mut asIScriptEngine,
        type_: *mut asITypeInfo,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asEngine_CreateScriptObjectCopy(
        e: *mut asIScriptEngine,
        obj: *mut ::std::os::raw::c_void,
        type_: *mut asITypeInfo,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asEngine_CreateUninitializedScriptObject(
        e: *mut asIScriptEngine,
        type_: *mut asITypeInfo,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asEngine_CreateDelegate(
        e: *mut asIScriptEngine,
        func: *mut asIScriptFunction,
        obj: *mut ::std::os::raw::c_void,
    ) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asEngine_AssignScriptObject(
        e: *mut asIScriptEngine,
        dstObj: *mut ::std::os::raw::c_void,
        srcObj: *mut ::std::os::raw::c_void,
        type_: *mut asITypeInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_ReleaseScriptObject(
        e: *mut asIScriptEngine,
        obj: *mut ::std::os::raw::c_void,
        type_: *mut asITypeInfo,
    );
}
extern "C" {
    pub fn asEngine_AddRefScriptObject(
        e: *mut asIScriptEngine,
        obj: *mut ::std::os::raw::c_void,
        type_: *mut asITypeInfo,
    );
}
extern "C" {
    pub fn asEngine_GetWeakRefFlagOfScriptObject(
        e: *mut asIScriptEngine,
        obj: *mut ::std::os::raw::c_void,
        type_: *mut asITypeInfo,
    ) -> *mut asILockableSharedBool;
}
extern "C" {
    pub fn asEngine_RequestContext(e: *mut asIScriptEngine) -> *mut asIScriptContext;
}
extern "C" {
    pub fn asEngine_ReturnContext(e: *mut asIScriptEngine, ctx: *mut asIScriptContext);
}
extern "C" {
    pub fn asEngine_SetContextCallbacks(
        e: *mut asIScriptEngine,
        requestCtx: asREQUESTCONTEXTFUNC_t,
        returnCtx: asRETURNCONTEXTFUNC_t,
        param: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_ParseToken(
        e: *mut asIScriptEngine,
        string: *const ::std::os::raw::c_char,
        stringLength: usize,
        tokenLength: *mut asUINT,
    ) -> asETokenClass;
}
extern "C" {
    pub fn asEngine_GarbageCollect(
        e: *mut asIScriptEngine,
        flags: asDWORD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GetGCStatistics(
        e: *mut asIScriptEngine,
        currentSize: *mut asUINT,
        totalDestroyed: *mut asUINT,
        totalDetected: *mut asUINT,
        newObjects: *mut asUINT,
        totalNewDestroyed: *mut asUINT,
    );
}
extern "C" {
    pub fn asEngine_NotifyGarbageCollectorOfNewObject(
        e: *mut asIScriptEngine,
        obj: *mut ::std::os::raw::c_void,
        type_: *mut asITypeInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GetObjectInGC(
        e: *mut asIScriptEngine,
        idx: asUINT,
        seqNbr: *mut asUINT,
        obj: *mut *mut ::std::os::raw::c_void,
        type_: *mut *mut asITypeInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asEngine_GCEnumCallback(e: *mut asIScriptEngine, obj: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn asEngine_SetUserData(
        e: *mut asIScriptEngine,
        data: *mut ::std::os::raw::c_void,
        type_: asPWORD,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asEngine_GetUserData(
        e: *mut asIScriptEngine,
        type_: asPWORD,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asEngine_SetEngineUserDataCleanupCallback(
        e: *mut asIScriptEngine,
        callback: asCLEANENGINEFUNC_t,
        type_: asPWORD,
    );
}
extern "C" {
    pub fn asEngine_SetModuleUserDataCleanupCallback(
        e: *mut asIScriptEngine,
        callback: asCLEANMODULEFUNC_t,
    );
}
extern "C" {
    pub fn asEngine_SetContextUserDataCleanupCallback(
        e: *mut asIScriptEngine,
        callback: asCLEANCONTEXTFUNC_t,
    );
}
extern "C" {
    pub fn asEngine_SetFunctionUserDataCleanupCallback(
        e: *mut asIScriptEngine,
        callback: asCLEANFUNCTIONFUNC_t,
    );
}
extern "C" {
    pub fn asEngine_SetTypeInfoUserDataCleanupCallback(
        e: *mut asIScriptEngine,
        callback: asCLEANTYPEINFOFUNC_t,
        type_: asPWORD,
    );
}
extern "C" {
    pub fn asEngine_SetScriptObjectUserDataCleanupCallback(
        e: *mut asIScriptEngine,
        callback: asCLEANSCRIPTOBJECTFUNC_t,
        type_: asPWORD,
    );
}



////////////////////////
/// AS_MODULE
////////////////////////
extern "C" {
    #[doc = ""]
    pub fn asModule_GetEngine(m: *mut asIScriptModule) -> *mut asIScriptEngine;
}
extern "C" {
    pub fn asModule_SetName(m: *mut asIScriptModule, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn asModule_GetName(m: *mut asIScriptModule) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asModule_Discard(m: *mut asIScriptModule);
}
extern "C" {
    pub fn asModule_AddScriptSection(
        m: *mut asIScriptModule,
        name: *const ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_char,
        codeLength: usize,
        lineOffset: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_Build(m: *mut asIScriptModule) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_CompileFunction(
        m: *mut asIScriptModule,
        sectionName: *const ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_char,
        lineOffset: ::std::os::raw::c_int,
        compileFlags: asDWORD,
        outFunc: *mut *mut asIScriptFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_CompileGlobalVar(
        m: *mut asIScriptModule,
        sectionName: *const ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_char,
        lineOffset: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_SetAccessMask(m: *mut asIScriptModule, accessMask: asDWORD) -> asDWORD;
}
extern "C" {
    pub fn asModule_SetDefaultNamespace(
        m: *mut asIScriptModule,
        nameSpace: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_GetDefaultNamespace(m: *mut asIScriptModule) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asModule_GetFunctionCount(m: *mut asIScriptModule) -> asUINT;
}
extern "C" {
    pub fn asModule_GetFunctionByIndex(
        m: *mut asIScriptModule,
        index: asUINT,
    ) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asModule_GetFunctionByDecl(
        m: *mut asIScriptModule,
        decl: *const ::std::os::raw::c_char,
    ) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asModule_GetFunctionByName(
        m: *mut asIScriptModule,
        name: *const ::std::os::raw::c_char,
    ) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asModule_RemoveFunction(
        m: *mut asIScriptModule,
        func: *mut asIScriptFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_ResetGlobalVars(
        m: *mut asIScriptModule,
        ctx: *mut asIScriptContext,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_GetGlobalVarCount(m: *mut asIScriptModule) -> asUINT;
}
extern "C" {
    pub fn asModule_GetGlobalVarIndexByName(
        m: *mut asIScriptModule,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_GetGlobalVarIndexByDecl(
        m: *mut asIScriptModule,
        decl: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_GetGlobalVarDeclaration(
        m: *mut asIScriptModule,
        index: asUINT,
        includeNamespace: asBOOL,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asModule_GetGlobalVar(
        m: *mut asIScriptModule,
        index: asUINT,
        name: *mut *const ::std::os::raw::c_char,
        nameSpace: *mut *const ::std::os::raw::c_char,
        typeId: *mut ::std::os::raw::c_int,
        isConst: *mut asBOOL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_GetAddressOfGlobalVar(
        m: *mut asIScriptModule,
        index: asUINT,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asModule_RemoveGlobalVar(
        m: *mut asIScriptModule,
        index: asUINT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_GetObjectTypeCount(m: *mut asIScriptModule) -> asUINT;
}
extern "C" {
    pub fn asModule_GetObjectTypeByIndex(
        m: *mut asIScriptModule,
        index: asUINT,
    ) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asModule_GetTypeIdByDecl(
        m: *mut asIScriptModule,
        decl: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_GetTypeInfoByName(
        m: *mut asIScriptModule,
        name: *const ::std::os::raw::c_char,
    ) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asModule_GetTypeInfoByDecl(
        m: *mut asIScriptModule,
        decl: *const ::std::os::raw::c_char,
    ) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asModule_GetEnumCount(m: *mut asIScriptModule) -> asUINT;
}
extern "C" {
    pub fn asModule_GetEnumByIndex(m: *mut asIScriptModule, index: asUINT) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asModule_GetTypedefCount(m: *mut asIScriptModule) -> asUINT;
}
extern "C" {
    pub fn asModule_GetTypedefByIndex(m: *mut asIScriptModule, index: asUINT) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asModule_GetImportedFunctionCount(m: *mut asIScriptModule) -> asUINT;
}
extern "C" {
    pub fn asModule_GetImportedFunctionIndexByDecl(
        m: *mut asIScriptModule,
        decl: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_GetImportedFunctionDeclaration(
        m: *mut asIScriptModule,
        importIndex: asUINT,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asModule_GetImportedFunctionSourceModule(
        m: *mut asIScriptModule,
        importIndex: asUINT,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asModule_BindImportedFunction(
        m: *mut asIScriptModule,
        importIndex: asUINT,
        func: *mut asIScriptFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_UnbindImportedFunction(
        m: *mut asIScriptModule,
        importIndex: asUINT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_BindAllImportedFunctions(m: *mut asIScriptModule) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_UnbindAllImportedFunctions(m: *mut asIScriptModule) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_SaveByteCode(
        m: *mut asIScriptModule,
        out: *mut asIBinaryStream,
        stripDebugInfo: asBOOL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_LoadByteCode(
        m: *mut asIScriptModule,
        in_: *mut asIBinaryStream,
        wasDebugInfoStripped: *mut asBOOL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asModule_SetUserData(
        m: *mut asIScriptModule,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asModule_GetUserData(m: *mut asIScriptModule) -> *mut ::std::os::raw::c_void;
}


////////////////////////
/// AS_CONTEXT
////////////////////////
extern "C" {
    #[doc = ""]
    pub fn asContext_AddRef(c: *mut asIScriptContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_Release(c: *mut asIScriptContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_GetEngine(c: *mut asIScriptContext) -> *mut asIScriptEngine;
}
extern "C" {
    pub fn asContext_Prepare(
        c: *mut asIScriptContext,
        func: *mut asIScriptFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_Unprepare(c: *mut asIScriptContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_Execute(c: *mut asIScriptContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_Abort(c: *mut asIScriptContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_Suspend(c: *mut asIScriptContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_GetState(c: *mut asIScriptContext) -> asEContextState;
}
extern "C" {
    pub fn asContext_PushState(c: *mut asIScriptContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_PopState(c: *mut asIScriptContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_IsNested(c: *mut asIScriptContext, nestCount: *mut asUINT) -> asBOOL;
}
extern "C" {
    pub fn asContext_SetObject(
        c: *mut asIScriptContext,
        obj: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_SetArgByte(
        c: *mut asIScriptContext,
        arg: asUINT,
        value: asBYTE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_SetArgWord(
        c: *mut asIScriptContext,
        arg: asUINT,
        value: asWORD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_SetArgDWord(
        c: *mut asIScriptContext,
        arg: asUINT,
        value: asDWORD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_SetArgQWord(
        c: *mut asIScriptContext,
        arg: asUINT,
        value: asQWORD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_SetArgFloat(
        c: *mut asIScriptContext,
        arg: asUINT,
        value: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_SetArgDouble(
        c: *mut asIScriptContext,
        arg: asUINT,
        value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_SetArgAddress(
        c: *mut asIScriptContext,
        arg: asUINT,
        addr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_SetArgObject(
        c: *mut asIScriptContext,
        arg: asUINT,
        obj: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_SetArgVarType(
        c: *mut asIScriptContext,
        arg: asUINT,
        ptr: *mut ::std::os::raw::c_void,
        typeId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_GetAddressOfArg(
        c: *mut asIScriptContext,
        arg: asUINT,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asContext_GetReturnByte(c: *mut asIScriptContext) -> asBYTE;
}
extern "C" {
    pub fn asContext_GetReturnWord(c: *mut asIScriptContext) -> asWORD;
}
extern "C" {
    pub fn asContext_GetReturnDWord(c: *mut asIScriptContext) -> asDWORD;
}
extern "C" {
    pub fn asContext_GetReturnQWord(c: *mut asIScriptContext) -> asQWORD;
}
extern "C" {
    pub fn asContext_GetReturnFloat(c: *mut asIScriptContext) -> f32;
}
extern "C" {
    pub fn asContext_GetReturnDouble(c: *mut asIScriptContext) -> f64;
}
extern "C" {
    pub fn asContext_GetReturnAddress(c: *mut asIScriptContext) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asContext_GetReturnObject(c: *mut asIScriptContext) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asContext_GetAddressOfReturnValue(
        c: *mut asIScriptContext,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asContext_SetException(
        c: *mut asIScriptContext,
        string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_GetExceptionLineNumber(
        c: *mut asIScriptContext,
        column: *mut ::std::os::raw::c_int,
        sectionName: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_GetExceptionFunction(c: *mut asIScriptContext) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asContext_GetExceptionString(c: *mut asIScriptContext) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asContext_SetExceptionCallback(
        c: *mut asIScriptContext,
        callback: asFUNCTION_t,
        obj: *mut ::std::os::raw::c_void,
        callConv: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_ClearExceptionCallback(c: *mut asIScriptContext);
}
extern "C" {
    pub fn asContext_SetLineCallback(
        c: *mut asIScriptContext,
        callback: asFUNCTION_t,
        obj: *mut ::std::os::raw::c_void,
        callConv: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_ClearLineCallback(c: *mut asIScriptContext);
}
extern "C" {
    pub fn asContext_GetCallstackSize(c: *mut asIScriptContext) -> asUINT;
}
extern "C" {
    pub fn asContext_GetFunction(
        c: *mut asIScriptContext,
        stackLevel: asUINT,
    ) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asContext_GetLineNumber(
        c: *mut asIScriptContext,
        stackLevel: asUINT,
        column: *mut ::std::os::raw::c_int,
        sectionName: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_GetVarCount(
        c: *mut asIScriptContext,
        stackLevel: asUINT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_GetVarName(
        c: *mut asIScriptContext,
        varIndex: asUINT,
        stackLevel: asUINT,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asContext_GetVarDeclaration(
        c: *mut asIScriptContext,
        varIndex: asUINT,
        stackLevel: asUINT,
        includeNamespace: asBOOL,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asContext_GetVarTypeId(
        c: *mut asIScriptContext,
        varIndex: asUINT,
        stackLevel: asUINT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_GetAddressOfVar(
        c: *mut asIScriptContext,
        varIndex: asUINT,
        stackLevel: asUINT,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asContext_IsVarInScope(
        c: *mut asIScriptContext,
        varIndex: asUINT,
        stackLevel: asUINT,
    ) -> asBOOL;
}
extern "C" {
    pub fn asContext_GetThisTypeId(
        c: *mut asIScriptContext,
        stackLevel: asUINT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asContext_GetThisPointer(
        c: *mut asIScriptContext,
        stackLevel: asUINT,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asContext_GetSystemFunction(c: *mut asIScriptContext) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asContext_SetUserData(
        c: *mut asIScriptContext,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asContext_GetUserData(c: *mut asIScriptContext) -> *mut ::std::os::raw::c_void;
}



////////////////////////
/// AS_GENERIC
////////////////////////
extern "C" {
    #[doc = ""]
    pub fn asGeneric_GetEngine(g: *mut asIScriptGeneric) -> *mut asIScriptEngine;
}
extern "C" {
    pub fn asGeneric_GetFunction(g: *mut asIScriptGeneric) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asGeneric_GetAuxiliary(g: *mut asIScriptGeneric) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asGeneric_GetObject(g: *mut asIScriptGeneric) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asGeneric_GetObjectTypeId(g: *mut asIScriptGeneric) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asGeneric_GetArgCount(g: *mut asIScriptGeneric) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asGeneric_GetArgTypeId(
        g: *mut asIScriptGeneric,
        arg: asUINT,
        flags: *mut asDWORD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asGeneric_GetArgByte(g: *mut asIScriptGeneric, arg: asUINT) -> asBYTE;
}
extern "C" {
    pub fn asGeneric_GetArgWord(g: *mut asIScriptGeneric, arg: asUINT) -> asWORD;
}
extern "C" {
    pub fn asGeneric_GetArgDWord(g: *mut asIScriptGeneric, arg: asUINT) -> asDWORD;
}
extern "C" {
    pub fn asGeneric_GetArgQWord(g: *mut asIScriptGeneric, arg: asUINT) -> asQWORD;
}
extern "C" {
    pub fn asGeneric_GetArgFloat(g: *mut asIScriptGeneric, arg: asUINT) -> f32;
}
extern "C" {
    pub fn asGeneric_GetArgDouble(g: *mut asIScriptGeneric, arg: asUINT) -> f64;
}
extern "C" {
    pub fn asGeneric_GetArgAddress(
        g: *mut asIScriptGeneric,
        arg: asUINT,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asGeneric_GetArgObject(
        g: *mut asIScriptGeneric,
        arg: asUINT,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asGeneric_GetAddressOfArg(
        g: *mut asIScriptGeneric,
        arg: asUINT,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asGeneric_GetReturnTypeId(
        g: *mut asIScriptGeneric,
        flags: *mut asDWORD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asGeneric_SetReturnByte(g: *mut asIScriptGeneric, val: asBYTE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asGeneric_SetReturnWord(g: *mut asIScriptGeneric, val: asWORD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asGeneric_SetReturnDWord(
        g: *mut asIScriptGeneric,
        val: asDWORD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asGeneric_SetReturnQWord(
        g: *mut asIScriptGeneric,
        val: asQWORD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asGeneric_SetReturnFloat(g: *mut asIScriptGeneric, val: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asGeneric_SetReturnDouble(g: *mut asIScriptGeneric, val: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asGeneric_SetReturnAddress(
        g: *mut asIScriptGeneric,
        addr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asGeneric_SetReturnObject(
        g: *mut asIScriptGeneric,
        obj: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asGeneric_GetAddressOfReturnLocation(
        g: *mut asIScriptGeneric,
    ) -> *mut ::std::os::raw::c_void;
}



////////////////////////
/// AS_OBJECT
////////////////////////
extern "C" {
    #[doc = ""]
    pub fn asObject_AddRef(s: *mut asIScriptObject) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asObject_Release(s: *mut asIScriptObject) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asObject_GetWeakRefFlag(s: *mut asIScriptObject) -> *mut asILockableSharedBool;
}
extern "C" {
    pub fn asObject_GetTypeId(s: *mut asIScriptObject) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asObject_GetObjectType(s: *mut asIScriptObject) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asObject_GetPropertyCount(s: *mut asIScriptObject) -> asUINT;
}
extern "C" {
    pub fn asObject_GetPropertyTypeId(
        s: *mut asIScriptObject,
        prop: asUINT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asObject_GetPropertyName(
        s: *mut asIScriptObject,
        prop: asUINT,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asObject_GetAddressOfProperty(
        s: *mut asIScriptObject,
        prop: asUINT,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asObject_GetEngine(s: *mut asIScriptObject) -> *mut asIScriptEngine;
}
extern "C" {
    pub fn asObject_CopyFrom(
        s: *mut asIScriptObject,
        other: *mut asIScriptObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asObject_SetUserData(
        s: *mut asIScriptObject,
        data: *mut ::std::os::raw::c_void,
        type_: asPWORD,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asObject_GetUserData(
        s: *mut asIScriptObject,
        type_: asPWORD,
    ) -> *mut ::std::os::raw::c_void;
}



////////////////////////
/// AS_TYPEINFO
////////////////////////
extern "C" {
    #[doc = ""]
    pub fn asTypeInfo_GetEngine(o: *mut asITypeInfo) -> *mut asIScriptEngine;
}
extern "C" {
    pub fn asTypeInfo_GetConfigGroup(o: *mut asITypeInfo) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asTypeInfo_GetAccessMask(o: *mut asITypeInfo) -> asDWORD;
}
extern "C" {
    pub fn asTypeInfo_GetModule(o: *mut asITypeInfo) -> *mut asIScriptModule;
}
extern "C" {
    pub fn asTypeInfo_AddRef(o: *const asITypeInfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asTypeInfo_Release(o: *const asITypeInfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asTypeInfo_GetName(o: *const asITypeInfo) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asTypeInfo_GetNamespace(o: *const asITypeInfo) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asTypeInfo_GetBaseType(o: *const asITypeInfo) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asTypeInfo_DerivesFrom(o: *const asITypeInfo, objType: *const asITypeInfo) -> asBOOL;
}
extern "C" {
    pub fn asTypeInfo_GetFlags(o: *const asITypeInfo) -> asDWORD;
}
extern "C" {
    pub fn asTypeInfo_GetSize(o: *const asITypeInfo) -> asUINT;
}
extern "C" {
    pub fn asTypeInfo_GetTypeId(o: *const asITypeInfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asTypeInfo_GetSubTypeId(
        o: *const asITypeInfo,
        subTypeIndex: asUINT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asTypeInfo_GetSubType(o: *const asITypeInfo, subTypeIndex: asUINT) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asTypeInfo_GetSubTypeCount(o: *const asITypeInfo) -> asUINT;
}
extern "C" {
    pub fn asTypeInfo_GetInterfaceCount(o: *const asITypeInfo) -> asUINT;
}
extern "C" {
    pub fn asTypeInfo_GetInterface(o: *const asITypeInfo, index: asUINT) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asTypeInfo_Implements(o: *const asITypeInfo, objType: *const asITypeInfo) -> asBOOL;
}
extern "C" {
    pub fn asTypeInfo_GetFactoryCount(o: *const asITypeInfo) -> asUINT;
}
extern "C" {
    pub fn asTypeInfo_GetFactoryByIndex(
        o: *const asITypeInfo,
        index: asUINT,
    ) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asTypeInfo_GetFactoryByDecl(
        o: *const asITypeInfo,
        decl: *const ::std::os::raw::c_char,
    ) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asTypeInfo_GetMethodCount(o: *const asITypeInfo) -> asUINT;
}
extern "C" {
    pub fn asTypeInfo_GetMethodByIndex(
        o: *const asITypeInfo,
        index: asUINT,
        getVirtual: asBOOL,
    ) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asTypeInfo_GetMethodByName(
        o: *const asITypeInfo,
        name: *const ::std::os::raw::c_char,
        getVirtual: asBOOL,
    ) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asTypeInfo_GetMethodByDecl(
        o: *const asITypeInfo,
        decl: *const ::std::os::raw::c_char,
        getVirtual: asBOOL,
    ) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asTypeInfo_GetPropertyCount(o: *const asITypeInfo) -> asUINT;
}
extern "C" {
    pub fn asTypeInfo_GetProperty(
        o: *const asITypeInfo,
        index: asUINT,
        name: *mut *const ::std::os::raw::c_char,
        typeId: *mut ::std::os::raw::c_int,
        isPrivate: *mut asBOOL,
        isProtected: *mut asBOOL,
        offset: *mut ::std::os::raw::c_int,
        isReference: *mut asBOOL,
        accessMask: *mut asDWORD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asTypeInfo_GetPropertyDeclaration(
        o: *const asITypeInfo,
        index: asUINT,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asTypeInfo_GetBehaviourCount(o: *const asITypeInfo) -> asUINT;
}
extern "C" {
    pub fn asTypeInfo_GetBehaviourByIndex(
        o: *const asITypeInfo,
        index: asUINT,
        outBehaviour: *mut asEBehaviours,
    ) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asTypeInfo_GetChildFuncdefCount(o: *mut asITypeInfo) -> asUINT;
}
extern "C" {
    pub fn asTypeInfo_GetChildFuncdef(o: *mut asITypeInfo, index: asUINT) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asTypeInfo_GetParentType(o: *mut asITypeInfo) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asTypeInfo_GetEnumValueCount(o: *mut asITypeInfo) -> asUINT;
}
extern "C" {
    pub fn asTypeInfo_GetEnumValueByIndex(
        o: *mut asITypeInfo,
        index: asUINT,
        outValue: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asTypeInfo_GetTypedefTypeId(o: *mut asITypeInfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asTypeInfo_GetFuncdefSignature(o: *mut asITypeInfo) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asTypeInfo_SetUserData(
        o: *mut asITypeInfo,
        data: *mut ::std::os::raw::c_void,
        type_: asPWORD,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asTypeInfo_GetUserData(
        o: *mut asITypeInfo,
        type_: asPWORD,
    ) -> *mut ::std::os::raw::c_void;
}



////////////////////////
/// AS_FUNCTION
////////////////////////
extern "C" {
    #[doc = ""]
    pub fn asFunction_GetEngine(f: *const asIScriptFunction) -> *mut asIScriptEngine;
}
extern "C" {
    pub fn asFunction_AddRef(f: *const asIScriptFunction) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asFunction_Release(f: *const asIScriptFunction) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asFunction_GetId(f: *const asIScriptFunction) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asFunction_GetFuncType(f: *const asIScriptFunction) -> asEFuncType;
}
extern "C" {
    pub fn asFunction_GetModuleName(f: *const asIScriptFunction) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asFunction_GetModule(f: *const asIScriptFunction) -> *mut asIScriptModule;
}
extern "C" {
    pub fn asFunction_GetScriptSectionName(
        f: *const asIScriptFunction,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asFunction_GetConfigGroup(f: *const asIScriptFunction) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asFunction_GetAccessMask(f: *const asIScriptFunction) -> asDWORD;
}
extern "C" {
    pub fn asFunction_GetAuxiliary(f: *const asIScriptFunction) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asFunction_GetObjectType(f: *const asIScriptFunction) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asFunction_GetObjectName(f: *const asIScriptFunction) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asFunction_GetName(f: *const asIScriptFunction) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asFunction_GetNamespace(f: *const asIScriptFunction) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asFunction_GetDeclaration(
        f: *const asIScriptFunction,
        includeObjectName: asBOOL,
        includeNamespace: asBOOL,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asFunction_IsReadOnly(f: *const asIScriptFunction) -> asBOOL;
}
extern "C" {
    pub fn asFunction_IsPrivate(f: *const asIScriptFunction) -> asBOOL;
}
extern "C" {
    pub fn asFunction_IsProtected(f: *const asIScriptFunction) -> asBOOL;
}
extern "C" {
    pub fn asFunction_IsFinal(f: *const asIScriptFunction) -> asBOOL;
}
extern "C" {
    pub fn asFunction_IsOverride(f: *const asIScriptFunction) -> asBOOL;
}
extern "C" {
    pub fn asFunction_IsShared(f: *const asIScriptFunction) -> asBOOL;
}
extern "C" {
    pub fn asFunction_GetParamCount(f: *const asIScriptFunction) -> asUINT;
}
extern "C" {
    pub fn asFunction_GetParam(
        f: *const asIScriptFunction,
        index: asUINT,
        typeId: *mut ::std::os::raw::c_int,
        flags: *mut asDWORD,
        name: *mut *const ::std::os::raw::c_char,
        defaultArg: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asFunction_GetReturnTypeId(f: *const asIScriptFunction) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asFunction_GetTypeId(f: *const asIScriptFunction) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asFunction_IsCompatibleWithTypeId(
        f: *const asIScriptFunction,
        typeId: ::std::os::raw::c_int,
    ) -> asBOOL;
}
extern "C" {
    pub fn asFunction_GetDelegateObject(f: *const asIScriptFunction)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asFunction_GetDelegateObjectType(f: *const asIScriptFunction) -> *mut asITypeInfo;
}
extern "C" {
    pub fn asFunction_GetDelegateFunction(f: *const asIScriptFunction) -> *mut asIScriptFunction;
}
extern "C" {
    pub fn asFunction_GetVarCount(f: *const asIScriptFunction) -> asUINT;
}
extern "C" {
    pub fn asFunction_GetVar(
        f: *const asIScriptFunction,
        index: asUINT,
        name: *mut *const ::std::os::raw::c_char,
        typeId: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asFunction_GetVarDecl(
        f: *const asIScriptFunction,
        index: asUINT,
        includeNamespace: asBOOL,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asFunction_FindNextLineWithCode(
        f: *const asIScriptFunction,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asFunction_GetByteCode(f: *mut asIScriptFunction, length: *mut asUINT) -> *mut asDWORD;
}
extern "C" {
    pub fn asFunction_SetUserData(
        f: *mut asIScriptFunction,
        userData: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn asFunction_GetUserData(f: *const asIScriptFunction) -> *mut ::std::os::raw::c_void;
}
